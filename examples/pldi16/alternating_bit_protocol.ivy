#lang ivy1.3

#
# A basic version of alternating bit protocol with binary (1-bit)
# sequence number and FIFO channels.
#

################################################################################
#
# Module for axiomatizing a totally ordered set with fixed order
#
# The module includes an le relation, a minimal element (zero) and
# get_succ and get_pred actions.
#
# In this module, the order is arbitrary and fixed.
#
################################################################################

module total_order(carrier) = {
    relation le(X:carrier,Y:carrier)   # less than or equal

    axiom le(X, X)                        # Reflexivity
    axiom le(X, Y) & le(Y, Z) -> le(X, Z) # Transitivity
    axiom le(X, Y) & le(Y, X) -> X = Y    # Anti-symmetry
    axiom le(X, Y) | le(Y, X)             # Totality

    individual zero:carrier
    axiom le(zero, X)

    action get_succ(x:carrier) returns (y:carrier) = {
       assume le(x,y) & x ~= y & ((le(x, Z) & x ~= Z) -> le(y, Z))
    }

    action get_pred(y:carrier) returns (x:carrier) = {
       assume le(x,y) & x ~= y & ((le(x, Z) & x ~= Z) -> le(y, Z))
    }
}


################################################################################
#
# A module for a fifo channel
#
################################################################################

module fifo_channel(m_t) = {
    relation le(X:m_t,Y:m_t)  # partial order representing
                                      # messages in the channel -
                                      # larger messages are older

    conjecture le(X, Y) & le(Y, Z) -> le(X, Z)  # Transitivity
    conjecture le(X, Y) & le(Y, X) -> X = Y  # Anti-symmetry
    conjecture le(X, Y) -> le(X, X) & le(Y, Y)  # Partial reflexivity
    conjecture le(X, X) & le(Y, Y) -> le(X, Y) | le(Y, X)  # Partial Totality

    init ~le(X, Y)

    action send(m: m_t) = {
        # insert m as a newest message
        assume ~le(m, m);
        le(m, m) := true;
        le(m, X) := le(X,X)
    }

    action receive returns (m: m_t) = {
        # receive the oldest message and remove it
        assume le(m, m);
        assume le(m,X) -> X = m;
        le(X,m) := false
    }

    action drop = {
        # drop a message
        local m: m_t {
            le(X,Y) := le(X, Y) & X ~= m & Y ~= m
        }
    }
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

# a totally ordered set for indices
type index
instantiate index : total_order(index)

# an uninterpreted sort for data items
type value
individual bot:value # special bottom value

# data messages (sent from sender to received), with a fifo channel,
# and a data item and sequence bit for every message
type data_msg_t
instantiate data_msg : fifo_channel(data_msg_t)
individual d(D:data_msg_t) : value
relation dbit(D:data_msg_t)
# need to also remember the index where the data came from
individual d_i(D:data_msg_t) : index



# ack messages (sent from receiver to sender), with a fifo channel and
# a sequence number bit for every message.
type ack_msg_t
instantiate ack_msg : fifo_channel(ack_msg_t)
relation abit(A:ack_msg_t)

# sender array and receiver array
individual sender_array(I:index) : value
individual receiver_array(I:index) : value
init receiver_array(I) = bot
init sender_array(I) ~= bot

# sender index and receiver index
individual  sender_i:index
init sender_i = index.zero
individual receiver_i:index
init receiver_i = index.zero

# sender and receiver bits, initially 0 (false)
relation sender_bit(I:index)
init ~sender_bit(I)
relation receiver_bit(I:index)
init ~receiver_bit(I)
conjecture I ~= index.zero -> ~sender_bit(I) & ~receiver_bit(I)

################################################################################
#
# Protocol actions
#
################################################################################

action sender_send = {
    # send (sender_array(sender_i), sender_bit)
    local m:data_msg_t {
        assume d(m) = sender_array(sender_i);
        assume d_i(m) = sender_i;
        assume dbit(m) <-> sender_bit(index.zero);
        call data_msg.send(m)
    }
}

action sender_receive_ack = {
    local a:ack_msg_t {
        a := ack_msg.receive();
        if abit(a) <-> sender_bit(index.zero) {
            sender_bit(index.zero) := ~sender_bit(index.zero);
            sender_i := index.get_succ(sender_i);
            call sender_send
        }
    }
}

action receiver_receive = {
    local m:data_msg_t, a:ack_msg_t {
        m := data_msg.receive();
        if dbit(m) <-> receiver_bit(index.zero) {
            # send ack with receiver_bit
            assume abit(a) <-> receiver_bit(index.zero);
            call ack_msg.send(a);

            # flip receiver bit, append to receiver array
            receiver_bit(index.zero) := ~receiver_bit(index.zero);
            receiver_array(receiver_i) := d(m);
            receiver_i := index.get_succ(receiver_i)
        }
    }
}

export sender_send
export sender_receive_ack
export receiver_receive
export data_msg.drop
export ack_msg.drop

################################################################################
#
# Safety and inductive invariant
#
################################################################################

# # Bogus conjecture used to make BMC return a trace receiver array has 4 values
# # takes around 15 seconds to find a trace
# conjecture ~(
#     ~index.le(I1,index.zero) &
#     ~index.le(I2, I1) &
#     ~index.le(I3, I2) &
#     receiver_array(I3) ~= bot
# )

# safety - receiver array has values from sender array
conjecture receiver_array(I) = bot | receiver_array(I) = sender_array(I)

# conjectures obtained interactively

conjecture sender_array(I0) ~= bot
conjecture ~(data_msg.le(D0,D0) & d(D0) ~= sender_array(I0) & sender_array(d_i(D0)) = sender_array(I0))
conjecture ~(index.le(receiver_i,sender_i) & sender_i ~= receiver_i)

conjecture (sender_bit(index.zero) <-> receiver_bit(index.zero)) <-> sender_i = receiver_i
conjecture index.le(I,sender_i) | index.le(receiver_i, I)
