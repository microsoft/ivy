#lang ivy1.3

################################################################################
#
# A module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


################################################################################
#
# Module describing a ring topology.
#
# The module includes an anti-reflexive ternary btw relation.
#
# The module also includes get_next and get_prev actions.
#
# In this module, the ring topology is arbitrary and fixed.
#
################################################################################

module ring_topology(carrier) = {

    relation btw(X:carrier,Y:carrier, Z:carrier) # Y is on the acyclic path from X to Z

    # Axiom defining the btw relation - note it's not reflexive
    # not needed: axiom btw(X,Y,Z) -> X ~= Y & X ~= Z & Y ~= Z  # anti-reflexive
    axiom btw(W,X,Y) & btw(W,Y,Z) -> btw(W,X,Z)  # transitive
    axiom btw(W,X,Y) -> ~btw(W,Y,X)  # acyclic
    axiom btw(W,X,Y) | btw(W,Y,X) | W=X | W=Y | X=Y  # total
    axiom btw(X,Y,Z) -> btw(Y,Z,X)  # cyclic permutations

    action get_next(x:carrier) returns (y:carrier) = {
        assume x ~= y & ((Z ~= x & Z ~= y) -> btw(x,y,Z))
    }

    action get_prev(y:carrier) returns (x:carrier) = {
        assume y ~= x & ((Z ~= y & Z ~= x) -> btw(y,x,Z))
    }

}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type node
type id

# A ring topology of nodes
instantiate ring : ring_topology(node)

# A total order on ids
relation le(X:id, Y:id)
instantiate total_order(le)

# A function relating a node to its id
individual idn(X:node) : id
axiom idn(X) = idn(Y) -> X = Y  # the idn function is injective

# A relation that keeps track of nodes that think they are the leader
relation leader(N:node)
init ~leader(N)

# A relation for pending messages, a message is just an id
relation pending(V:id, N:node) # The identity V is pending at node N
init ~pending(V, N)


################################################################################
#
# Protocol description
#
# Two action: send and receive
#
################################################################################

action send = {
    local n1:node, n2:node {
        # send my own id to the next node
        n2 := ring.get_next(n1);
        pending(idn(n1), n2) := true
    }
}

action receive = {
    local n1:node, n2:node, m:id {
        # receive a message from the right neighbor
        assume pending(m, n1);
        pending(m, n1) := *; # abstract the number of pending messages
        if m = idn(n1) {  # Found a leader
            leader(n1) := true
        } else {
            if le(idn(n1), m) { # pass message to next node
                n2 := ring.get_next(n1);
                pending(m, n2) := true
            } # otherwise drop the message...
        }
    }
}

export send
export receive

# bogus conjecture
# conjecture ~(
#     N1 ~= N2 &
#     N1 ~= N3 &
#     N2 ~= N3 &
#     leader(N1)
# )

# The safety property:
conjecture leader(X) & leader(Y) -> X = Y  # at most one leader

# conjectures obtained via CTI's
# conjecture ~(le(idn(N1),idn(N0)) & pending(idn(N1),N1) & idn(N1) ~= idn(N0))
# conjecture ~(le(idn(N2),idn(N0)) & pending(idn(N2),N1) & ring.btw(N0,N1,N2))
# conjecture ~(le(idn(N1),idn(N0)) & leader(N1) & N1 ~= N0)
